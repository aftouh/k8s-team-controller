// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	teamv1 "github.com/aftouh/k8s-sample-controller/pkg/apis/team/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeTeams implements TeamInterface
type FakeTeams struct {
	Fake *FakeAftouhV1
}

var teamsResource = schema.GroupVersionResource{Group: "aftouh.io", Version: "v1", Resource: "teams"}

var teamsKind = schema.GroupVersionKind{Group: "aftouh.io", Version: "v1", Kind: "Team"}

// Get takes name of the team, and returns the corresponding team object, and an error if there is any.
func (c *FakeTeams) Get(name string, options v1.GetOptions) (result *teamv1.Team, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(teamsResource, name), &teamv1.Team{})
	if obj == nil {
		return nil, err
	}
	return obj.(*teamv1.Team), err
}

// List takes label and field selectors, and returns the list of Teams that match those selectors.
func (c *FakeTeams) List(opts v1.ListOptions) (result *teamv1.TeamList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(teamsResource, teamsKind, opts), &teamv1.TeamList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &teamv1.TeamList{ListMeta: obj.(*teamv1.TeamList).ListMeta}
	for _, item := range obj.(*teamv1.TeamList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested teams.
func (c *FakeTeams) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(teamsResource, opts))
}

// Create takes the representation of a team and creates it.  Returns the server's representation of the team, and an error, if there is any.
func (c *FakeTeams) Create(team *teamv1.Team) (result *teamv1.Team, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(teamsResource, team), &teamv1.Team{})
	if obj == nil {
		return nil, err
	}
	return obj.(*teamv1.Team), err
}

// Update takes the representation of a team and updates it. Returns the server's representation of the team, and an error, if there is any.
func (c *FakeTeams) Update(team *teamv1.Team) (result *teamv1.Team, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(teamsResource, team), &teamv1.Team{})
	if obj == nil {
		return nil, err
	}
	return obj.(*teamv1.Team), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeTeams) UpdateStatus(team *teamv1.Team) (*teamv1.Team, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(teamsResource, "status", team), &teamv1.Team{})
	if obj == nil {
		return nil, err
	}
	return obj.(*teamv1.Team), err
}

// Delete takes name of the team and deletes it. Returns an error if one occurs.
func (c *FakeTeams) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(teamsResource, name), &teamv1.Team{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeTeams) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(teamsResource, listOptions)

	_, err := c.Fake.Invokes(action, &teamv1.TeamList{})
	return err
}

// Patch applies the patch and returns the patched team.
func (c *FakeTeams) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *teamv1.Team, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(teamsResource, name, pt, data, subresources...), &teamv1.Team{})
	if obj == nil {
		return nil, err
	}
	return obj.(*teamv1.Team), err
}
